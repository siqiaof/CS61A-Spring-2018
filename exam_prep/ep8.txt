#1.1
#f
#f
3
2
(1 2 3 4 5 6)
Error
(5 1 2 3)
4

#1.2
(define (deeval num k)
  (cond
    ((and (= k 1) (or (= num 0) (= num 1))) 1)
    ((and (= k 1) (or (< num 0) (> num 1))) 0)
    (else
      (+
        (if (= (modulo num k) 0)
            (deeval (/ num k) (- k 1))
            0
        )
        (deeval (- num k) (- k 1))
        )
      )
    )
)

#1.5
(define (deep-reverse lst)
  (cond ((null? lst) ())
    ((list? (car lst)) (append (deep-reverse (cdr lst)) (cons (deep-reverse (car lst)) nil)))
    (else (append (deep-reverse (cdr lst)) (cons (car lst) nil)))
  )
)

(define (reverse lst) (if (null? lst) () (append (reverse (cdr lst)) (cons (car lst) nil))))



