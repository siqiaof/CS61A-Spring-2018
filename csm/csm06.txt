#2
(define (hailstone seed n)
(if (= 0 n) seed (if (= 0 (remainder seed 2)) (hailstone (/ seed 2) (- n 1)) (hailstone (+ 1 (* 3 seed)) (- n 1))))
)

; Doctests
> (hailstone 10 0)
10
> (hailstone 10 1)
5
> (hailstone 10 2)
16
> (hailstone 5 1)
16
> (hailstone 5 5)
1

#4
(define (well-formed lst)
 (if (null? lst) #t (if (or (pair? (cdr lst)) (null? (cdr lst))) (well-formed (cdr lst)) #f))
)

; Doctests
> (well-formed '())
true
> (well-formed '(1 2 3))
true
; List doesn't end in nil
> (well-formed (cons 1 2))
false
; You do NOT need to check nested lists
> (well-formed (cons (cons 1 2) nil))
true

#5
(define (is-prefix s t)
  (if (null? s) true (if (null? t) false (if (= (car s) (car t)) (is-prefix (cdr s) (cdr t)) false)))
)
 
; Doctests:
> (is-prefix '() '())
true
> (is-prefix '() '(1 2))
true
> (is-prefix '(1) '(1 2))
true
> (is-prefix '(2) '(1 2))
false
; Note here p is longer than lst
> (is-prefix '(1 2) '(1))
false